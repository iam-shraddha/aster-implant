*******************************************************************************
#Terraform vpc creation

provider "aws"{
   region = "us-east-1"
}

resource "aws_vpc""my_vpc"{
   cidr_block = "10.0.0.0/16"
   }

resource"aws_subnet""public_subnet"{ 
  vpc_id = "aws_vpc.my_vpc.id"
  cidr_block = "10.0.1.0/24"
  }

resource"aws_subnet""private_subnet"{
  vpc_id = "aws_vpc.my_vpc.id"
  cidr_block = "10.0.2.0/24"

resource"aws_internet_gateway""my_igw"{
  vpc_id = "aws_vpc.my_vpc.id"
}

resource"aws_route_table""my_rt"{
  vpc_id = "aws_vpc.my_vpc.id"
}
resource"aws_route""public_route"{
  route_table_id = "aws_routetable.my_rt.id"
  cidr_block = "0.0.0.0/0"
  gateway_id = aws_internet_gateway.my_igw.id"
}

resource"aws_route_table_association""my_rt_assc"{
  subnet_id = "aws_subnet.public_subet.id"
  route_table_id = ""

*****************************************************************************
1.SHELL_SCRIPT

#!/bin/bash
#shell script for health check

SERVICE="nginx"
while true; do
 if systemctl is-active --quiet $SERVICE; then
   echo "$SERVICE is running"
 else 
   echo "$SERVICE is not running"
   systemctl start $SERVICE
 fi
 sleep 5
done

*******************************************************************************
2.SHELL_SCRIPT

#!/bin/bash
# Backup directory to a target location

SOURCE_DIR="/path/to/source"
TARGET_DIR="/path/to/backup/location"
DATE=$(date +%Y-%m-%d)

# Create a backup folder with the current date
mkdir -p "$TARGET_DIR/backup-$DATE"

# Copy the contents from source to target
cp -r "$SOURCE_DIR"/* "$TARGET_DIR/backup-$DATE"

echo "Backup completed!"

*******************************************************************************
3.SHELL_SCRIPT

#!/bin/bash
# Disk usage report for home directory

echo "Disk Usage Report for Home Directory:"
du -sh ~

*******************************************************************************
4.SHELL_SCRIPT

#!/bin/bash
# Check if file exists

FILE="/path/to/file"

if [ -f "$FILE" ]; then
    echo "$FILE exists."
else
    echo "$FILE does not exist."
fi

*******************************************************************************
5.SHELL_SCRIPT
while true; do
    echo -e "\n1. Add\n2. Subtract\n3. Multiply\n4. Divide\n5. Exit"
    read -p "Choose [1-5]: " op

    if [ "$op" -eq 5 ]; then
        echo "Exiting..."
        break
    fi

    read -p "Enter first number: " num1
    read -p "Enter second number: " num2

    case $op in
        1) echo "Result: $((num1 + num2))";;
        2) echo "Result: $((num1 - num2))";;
        3) echo "Result: $((num1 * num2))";;
        4) 
            if [ "$num2" -eq 0 ]; then
                echo "Error: Division by zero!"
            else
                echo "Result: $((num1 / num2))"
            fi;;
        *) echo "Invalid option";;
    esac
done

*******************************************************************************
6.SHELL_SCRIPT

#!/bin/bash
# Countdown timer

echo "Enter time in seconds: "
read seconds

while [ $seconds -gt 0 ]; do
  echo "$seconds seconds remaining..."
  sleep 1
  seconds=$((seconds-1))
done
echo "Time's up!"

*******************************************************************************
7.SHELL_SCRIPT

#!/bin/bash
# Find and replace text in a file

FILE="filename.txt"
SEARCH_STRING="old_string"
REPLACE_STRING="new_string"

if [ -f "$FILE" ]; then
  sed -i "s/$SEARCH_STRING/$REPLACE_STRING/g" $FILE
  echo "Replaced $SEARCH_STRING with $REPLACE_STRING in $FILE."
else
  echo "File $FILE not found!"
fi

*******************************************************************************
8.SHELL_SCRIPT

#!/bin/bash
# Check network connectivity

ping -c 3 google.com

if [ $? -eq 0 ]; then
    echo "Internet connection is active."
else
    echo "No internet connection."
fi

*******************************************************************************
9.SHELL_SCRIPT

#!/bin/bash
# Display user information

echo "User Information"
echo "Username: $(whoami)"
echo "Home Directory: $HOME"
echo "Shell: $SHELL"
echo "Current Directory: $(pwd)"

*******************************************************************************
10.SHELL_SCRIPT

#!/bin/bash
# Check system uptime

echo "System Uptime:"
uptime

*******************************************************************************
11.SHELL_SCRIPT

#!/bin/bash
# Create and navigate to a directory

echo "Enter directory name: "
read dir_name

mkdir -p "$dir_name"  

cd "$dir_name"  

echo "Now inside: $(pwd)"

*******************************************************************************
12.SHELL_SCRIPT

#!/bin/bash
# Check if a directory exists

DIR="/path/to/directory"

if [ -d "$DIR" ]; then
    echo "Directory $DIR exists."
else
    echo "Directory $DIR does not exist."
fi

*******************************************************************************
13.SHELL_SCRIPT

#!/bin/bash
# Delete files older than 7 days

TARGET_DIR="/path/to/directory"
DAYS=7

find "$TARGET_DIR" -type f -mtime +$DAYS -exec rm {} \;

echo "Deleted files older than $DAYS days from $TARGET_DIR."

*******************************************************************************
14.SHELL_SCRIPT

#!/bin/bash
# Monitor CPU usage

while true; do
   echo "CPU Usage:"
   mpstat 1 1  

# Requires 'sysstat' package
   sleep 5
done

*******************************************************************************
15.SHELL_SCRIPT

#!/bin/bash
# List files and subdirectories

echo "Listing all files and directories in $(pwd):"
ls -l

*******************************************************************************
16.SHELL_SCRIPT

#!/bin/bash
# Display memory usage

echo "Memory Usage Information:"
free -h  

*******************************************************************************
17.SHELL_SCRIPT

#!/bin/bash
# Send an email using mail command

TO_ADDRESS="email@example.com"
SUBJECT="Test Email"
BODY="This is a test email sent via shell script."

echo "$BODY" | mail -s "$SUBJECT" "$TO_ADDRESS"

echo "Email sent to $TO_ADDRESS."

*******************************************************************************
18.SHELL_SCRIPT

#!/bin/bash
# Rename multiple files by appending the date

DATE=$(date +%Y-%m-%d)

for file in *.txt; do
    mv "$file" "${file%.txt}-$DATE.txt"
done

echo "Files renamed with date appended."

*******************************************************************************
19.SHELL_SCRIPT

#!/bin/bash
# Simple interactive menu

echo "Select an option:"
echo "1. Show date and time"
echo "2. List files"
echo "3. Display disk usage"
echo "4. Exit"

read choice

case $choice in
  1)
    date;;
  2)
    ls;;
  3)
    df -h;;
  4)
    echo "Exiting";;
  *)
    echo "Invalid option";;
esac

*******************************************************************************
20.SHELL_SCRIPT
#!/bin/bash
# Check if a process is running

PROCESS="apache2"

if pgrep "$PROCESS" > /dev/null; then
    echo "$PROCESS is running."
else
    echo "$PROCESS is not running."
fi

*******************************************************************************
21.SHELL_SCRIPT

#!/bin/bash
# Download a file from the web

URL="http://example.com/file.zip"
DEST="/path/to/save"

wget -O "$DEST" "$URL"

echo "File downloaded to $DEST"

*******************************************************************************
22.SHELL_SCRIPT

#!/bin/bash
# Generate a random password

LENGTH=12
PASSWORD=$(openssl rand -base64 $LENGTH | cut -c1-$LENGTH)

echo "Generated Password: $PASSWORD"

*******************************************************************************
23.SHELL_SCRIPT

#!/bin/bash
# Archive and compress a directory

DIR_TO_ARCHIVE="/path/to/directory"
ARCHIVE_NAME="archive.tar.gz"

tar -czvf $ARCHIVE_NAME $DIR_TO_ARCHIVE

echo "Directory $DIR_TO_ARCHIVE compressed to $ARCHIVE_NAME."

*******************************************************************************
24.SHELL_SCRIPT

#!/bin/bash
# Update and upgrade system

sudo apt update && sudo apt upgrade -y

echo "System update and upgrade completed."

*******************************************************************************
25.SHELL_SCRIPT

#!/bin/bash
echo "Enter a number:"
read num
rev=0
while [ $num -gt 0 ]; do
    rev=$((rev*10 + num%10))
    num=$((num/10))
done
echo "Reversed number: $rev"


*******************************************************************************
26.SHELL_SCRIPT

#!/bin/bash
echo "Enter a number:"
read num
if [ $((num % 2)) -eq 0 ]; then
    echo "$num is even"
else
    echo "$num is odd"
fi

*******************************************************************************
27.SHELL_SCRIPT

#!/bin/bash
echo "Enter a string:"
read str
if [ "$str" == "$(echo $str | rev)" ]; then
    echo "$str is a palindrome"
else
    echo "$str is not a palindrome"
fi

*******************************************************************************
28.SHELL_SCRIPT

#!/bin/bash
echo "Enter a number:"
read num
sum=0
while [ $num -gt 0 ]; do
    sum=$((sum + num % 10))
    num=$((num / 10))
done
echo "Sum of digits: $sum"

*******************************************************************************
29.SHELL_SCRIPT

#!/bin/bash
echo "Enter a number:"
read num
fact=1
for ((i=2; i<=num; i++)); do
    fact=$((fact * i))
done
echo "Factorial of $num is $fact"

*******************************************************************************
30.SHELL_SCRIPT

#!/bin/bash
# Reverse string 
echo "Enter a string:"
read str

reverse=""
len=${#str}

for (( i=$len-1; i>=0; i-- ))
do
    reverse="$reverse${str:$i:1}"
done

echo "Reversed string: $reverse"

*******************************************************************************
31.SHELL_SCRIPT

#!/bin/bash
echo -n "Enter A Number: "
read -r n
arm=0
temp=$n
while [ "$n" -ne 0 ]; do
	r=$((n % 10))
	arm=$((arm + r * r * r))
	n=$((n / 10))
done
echo $arm
if [ $arm -eq "$temp" ]; then
	echo "Armstrong"
else
	echo "Not Armstrong"
fi

*******************************************************************************






























