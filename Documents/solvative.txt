
**********************************************************************************
Scenerio 1:Infrastructure as Code

# Configure AWS Provider
provider "aws" {
  region = "us-east-1"
}

# Create S3 Bucket for Media Storage
resource "aws_s3_bucket" "media_bucket" {
  bucket = "my-media-bucket"
}

# Create DynamoDB Table for Metadata Storage
resource "aws_dynamodb_table" "my-data" {
  name           = "MyData"
  billing_mode   = "PAY_PER_REQUEST"
  hash_key       = "MyId"

  attribute {
    name = "MyId"
    type = "S"
  }
}

# Create Lambda Function for Serverless Compute
resource "aws_lambda_function" "media_lambda" {
  filename      = "my-lambda-func.zip"
  function_name = "my-lambda-func"
  handler       = "index.handler"
  runtime       = "Node.js"
  role          = "aws_iam_role.lambda_exec.arn"
}

# Create API Gateway REST API
resource "aws_api_gateway_rest_api" "media_api" {
  name        = "my-media-api"
  description = "Media Streaming API"
}

# Create API Gateway Resource and Method
resource "aws_api_gateway_resource" "media_resource" {
  rest_api_id = aws_api_gateway_rest_api.media_api.id
  parent_id   = aws_api_gateway_rest_api.media_api.root_resource_id
  path_part   = "media"
}

resource "aws_api_gateway_method" "media_method" {
  rest_api_id   = aws_api_gateway_rest_api.media_api.id
  resource_id   = aws_api_gateway_resource.media_resource.id
  http_method   = "GET"
  authorization = "NONE"
}

# Create CloudFront Distribution
resource "aws_cloudfront_distribution" "media_cdn" {
  origin {
    domain_name = aws_s3_bucket.media_bucket.website_endpoint
    origin_id   = "S3MediaOrigin"
  }
  enabled             = true
  default_root_object = "index.html"
}

**********************************************************************************

Scenerio 2: Install Dependencies
---
- name: Install Apache2, MySQL, and Docker
  hosts: ubuntu_server
  become: yes
  tasks:
    - name: Update apt packages
      apt:
        update_cache: yes

    - name: Install packages
      apt:
        name:
          - apache2
          - mysql-server
          - docker.io
        state: present

    - name: Ensure Docker is started and enabled
      service:
        name: docker
        state: started
        enabled: yes

    - name: Pull and start Docker container
      docker_container:
        name: nginx_container
        image: nginx:latest
        state: started
        restart_policy: unless-stopped
        volumes:
          -  /home/user/my_data:/var/www/html

**********************************************************************************
Scenerio 3: Create Automation Scripts
#Resource Monitoring

 #!/bin/bash
 echo "System Resource Usage"
 echo "CPU Usage: $(top -bn1 | grep "Cpu(s)" | awk '{print 100 - $8 "%"}')"

 echo "Memory Usage: $(free -h | awk '/Mem:/ {print $3 "/" $2}')"

 echo "Top 3 Processes by CPU Usage:"
 ps -eo pid,comm,%cpu --sort=-%cpu | head -n 2

 echo "Top 5 Processes by Memory Usage:"
 ps -eo pid,comm,%mem --sort=-%mem | head -n 2


#Mysql Backup
 
 #!/bin/bash
 DB_NAME="mydatabase"         
 My_Backup="/home/ubuntu/Scripts/db_backup"   

 mkdir -p "$MY_BACKUP"

 BACKUP_FILE="$BACKUP_DIR/${DB_NAME}_backup_$(date +'%Y%m%d').sql"
 mysqldump -u root -p "$DB_NAME" > "$BACKUP_FILE"

 if [ $? -eq 0 ]; then
   echo "MySQL backup completed: $BACKUP_FILE"
 else
   echo "MySQL backup failed!"
 fi


**********************************************************************************

Scenerio 4: Docker And Containerization
#Dockerfile

 FROM nginx:latest

 COPY ./my_html /usr/share/nginx/html

 EXPOSE 80

 CMD ["nginx", "-g", "daemon off;"]


#docker-compose.yml

 version: '3.8'

 services:
   web:
     build: .
     ports:
       - "8080:80"


**********************************************************************************