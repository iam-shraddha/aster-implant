
Terraform Registry for Reference ===> https://registry.terraform.io/

Iac allows u to build, change and manage infrastructure in a safe, consistent and repeatable way by defining resource configurations that u can version, reuse and share.

1.Scope==> Req gathering cloud provider and resources
2.Author==> Write configuration files to define your infra
3.Initialize==> Install req terraform providers
4.Plan==> Preview the changes terraform will make
5.Apply==> Make the changes to your infra

Terraform Installation:
Dw url https://releases.hashicorp.com/terraform/1.11.0/terraform_1.11.0_windows_386.zip
extract filesin c drive
go to env variables and add path of file location

Aws:
Create new user and note the access key and secret access key.
Install aws cli then configure it in vs code.(credentials)
Install hashicorp extention in vs.

==========================================================================================
example:main.tf
terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "5.89.0"
    }
  }
}

provider "aws" {
    region = "ap-south-1"
}

resource "aws_instance" "my_server" {
    ami           = "ami-0d682f26195e9ec0f"
    instance_type = "t2.micro"
    
    tags = {
        
        Name = "sample-server"
    }
}
===============================================================================================

Terraform config:
- It uses .tf extention
-Format is HCL(Hashicorp config Lang)
-Declarative lang
-State management:
    The state file maintains a detailed recordof current state of managed resources.
-Terraform also supports Json format


Terraform vriable:
variable "region" {
   description = "The aws region"
   default     = "ap-south-1"
 }

Terraform random provider:
random ={
   source = "hashicorp/random"
   version = "3.6.2"




resource "aws_s3_bucket_policy" "mywebapp" {
  bucket = aws_s3_bucket.mywebapp-bucket.id
  policy = jsonencode(
    {
      Version = "2012-10-17",
      Statement = [
        {
          Sid       = "PublicReadGetObject",
          Effect    = "Allow",
          Principal = "*",
          Action    = "s3:GetObject",
          Resource  = "${aws_s3_bucket.mywebapp-bucket.arn}/*"
        }
      ]
    }
  )


========================================================================================================================

Data Source:
It allows u to fetch and use info from external source or existing resources within ur cloud infrastructure.
Useful for obtaining dynamic data that u need for ur configuration.

data "aws_security_group" "my-sg" {
    tags = {
      sg = "my-sg"
    }
  }

output "name" {
    value = data.aws_security_group.my-sg.id
  }


=======================================================================================================================

Terraform Variables:
variable "instance_type" {
    description = "Type of instance"
    type = string
    validation {
      condition =var.instance_type=="t2.micro" || var.instance_type=="t3.micro"
      error_message = "Only t2 and t3 micro are allowed"
    }
}


Terraform Map:
variable "additional_tags" {
    type = map(string)
    default = {}
 }

Priority structure====>
4)Environmentvariable:
It is used to provide sensitive data. U can provide value of an resource using env variable.
    export TF_VAR_instance_type=t2.micro


3)terraform.tfvars:
Set of value of variables which u provide here will apply in ur configurationn or resource. 
      instance_type = "t2.micro"
      ec2_config = {
      v_size = 30
      v_type = "gp3"
  }


2)auto.tfvars:
If u need all settings as ec2_config only change in v_size. So u can use tfauto.vars

1)-var or -var.file

terraform plan -var='ec2_config={v_size=50, v_type="gp2"}'


Local values:
If config becomes complicated and some info is repeats again and again in that case u can go with it.

=================================================================================================
Terraform Functions:
Built-in functions that u can call from within expressions to transform and combine values.
           max(5,12,9)

===============================================================================================

Iam ptoject:
Create yaml file
To access yaml file in main.tf-
    locals {
        users_data = file("./users.yaml")
    }

To work with yaml data: 
     users_data = yamldecode(file("./users.yaml"))

===============================================================================================

Terraform Modules:
Modules are containers for multiple resources that are used together.
A module consist of a collection of .tf/.tf.json files kept together in dir.
Modules are the main way to pavkage and reuse resource comfoiguration with terraform.
                $ tree minimal-module/
                -README.md
                -main.tf
                -variables.tf
                -outputs.tf

Create module
create repo in git
    -git clone
    -git add
    -git commit
    -git push
Sign in terraform registry  module

==================================================================================================
Terraform Resource Dependency:
1]Explicit dependency=>
  depends_on = [aws_securyty_group.main]... instance shouldcreate after security group
2]Implicit dependency=>
  vpc_security_group_ids = [aws_security_group.main.id]... instance will create using sg from this vpc only

==================================================================================================

Terraform Lifecycle:
1]create_before_destroy = true
     It will create new resource upon change then it will destroy the resource. So we can prevent any runtime of the website.
2]prevent_destroy = true
     To prevent acccidental deletion of the important or critical resource.
3]ignore_changes
     In resource block if there's any change in properties do not run that block.
4]replaced_triggered_by = [aws_security-group.main.ingress]
     if there's any cchange in ingress rules then it should replace and create new ec2 instance.
==================================================================================================

Terraform Validations:









